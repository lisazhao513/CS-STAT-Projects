range(1, 5, 1)
seq(1, 5)
ytm = [3.4, 3.6, 3.8, 3.9]/100
ytm = (3.4, 3.6, 3.8, 3.9)/100
ytm = list(3.4, 3.6, 3.8, 3.9)/100
ytm = list(3.4, 3.6, 3.8, 3.9)
list(3.4, 3.6, 3.8, 3.9)
list(3.4, 3.6, 3.8, 3.9)/100
c(3.4, 3.6, 3.8, 3.9)/100
ytm = c(3.4, 3.6, 3.8, 3.9)/100
ytm[-1]
tail(ytm)
Tail(ytm)
install.packages(BBmisc)
knitr::opts_chunk$set(echo = TRUE)
library(bbmisc)
knitr::opts_chunk$set(echo = TRUE)
Tail(ytm, n-1)
tail(ytm, n-1)
tail(ytm, n=1)
ytm[1]
face_value = 1000
num = seq(1, 4)
ytm = c(3.4, 3.6, 3.8, 3.9)/100
total = 0
x = for (i in num){
total = total + 1/(1+ytm[i])^num[i]
}
(face_value - face_value/(1+tail(ytm, n=1))^(tail(num, n-1))) / x
for (i in num){
total = total + 1/(1+ytm[i])^num[i]
}
face_value = 1000
num = seq(1, 4)
ytm = c(3.4, 3.6, 3.8, 3.9)/100
x = 0
for (i in num){
x = x + 1/(1+ytm[i])^num[i]
}
(face_value - face_value/(1+tail(ytm, n=1))^(tail(num, n-1))) / x
x
tail(num, n-1)
face_value = 1000
num = seq(1, 4)
ytm = c(3.4, 3.6, 3.8, 3.9)/100
x = 0
for (i in num){
x = x + 1/(1+ytm[i])^num[i]
}
(face_value - face_value/(1 + tail(ytm, n=1))^(tail(num, n=1))) / x
face_value = 1000
num = seq(1, 4)
ytm = c(4.2, 4.5, 4.7, 5)/100
x = 0
for (i in num){
x = x + 1/(1+ytm[i])^num[i]
}
(face_value - face_value/(1 + tail(ytm, n=1))^(tail(num, n=1))) / x
face_value = 1000
num = seq(1, 4)
ytm = c(4.2, 4.5, 4.7, 5)/100
x = 0
for (i in num){
x = x + 1/(1+ytm[i])^num[i]
}
(face_value - face_value/(1 + tail(ytm, n=1))^(tail(num, n=1))) / x /face_value
face_value = 100
price = 77.12
n = 5
(face_value/price)^(1/n) - 1
face_value = 100
price = 77.12
n = 5
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 82.36
n = 5
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 87.14
n = 3
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 82.36
n = 4
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 87.14
n = 3
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 91.81
n = 2
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 96.24
n = 1
((face_value/price)^(1/n) - 1)*100
face_value = 100
price = 91.81
n = 2
((face_value/price)^(1/n) - 1)*100
library(shiny); runApp('C:/Users/lisaz/Downloads/countries_visited.R')
dat
dat
dat <- iso3166
dat
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/UCB_fall22/STAT_133/Homework/hw5/app-investment-simulator.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
library(shiny); runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
dat
dat <- iso3166
dat <- rename(dat, "iso-a3" = a3)
countries_visited <- c("CAN", "CHN", "JAM", "FRA", "GBR", " USA", "MEX", "BHS")
countries_want_visit <- c("AUS", "AUT", "BTN","BRA", "BGR", "KHM", "CYM", "DNK",
"EGY", "FJI", "DEU", "GRC", "GRL", "HKG", "ISL", "IRL",
"ISR", "ITA", "JPN", "KOR", "MAC", "MYS", "MNG", "MMR",
"NPL", "NLD", "NZL", "NOR", "SGP", "ESP", "SWE", "CHE",
"TWN", "THA", "TUR", "ARE", "VNM")
dat$places_visited <- ifelse(dat$`iso-a3` %in% countries_visited, 1, 0)
dat$want_visit <- ifelse(dat$`iso-a3` %in% countries_want_visit, 1, 0)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat_final() <- subset(dat_final(), dat$selected == 1)
dat_final <- subset(dat_final, dat$selected == 1)
sort(dat_final$ISOname)
dat_final
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
dat <- iso3166
dat <- rename(dat, "iso-a3" = a3)
countries_visited <- c("CAN", "CHN", "JAM", "FRA", "GBR", " USA", "MEX", "BHS")
countries_want_visit <- c("AUS", "AUT", "BTN","BRA", "BGR", "KHM", "CYM", "DNK",
"EGY", "FJI", "DEU", "GRC", "GRL", "HKG", "ISL", "IRL",
"ISR", "ITA", "JPN", "KOR", "MAC", "MYS", "MNG", "MMR",
"NPL", "NLD", "NZL", "NOR", "SGP", "ESP", "SWE", "CHE",
"TWN", "THA", "TUR", "ARE", "VNM")
dat$places_visited <- ifelse(dat$`iso-a3` %in% countries_visited, 1, 0)
dat$want_visit <- ifelse(dat$`iso-a3` %in% countries_want_visit, 1, 0)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat_final <- subset(dat_final, dat_final$selected == 1)
dat_final
sort(dat_final$ISOname)
dat_final
dat_final %>% subset(dat_final, dat_final$selected == 1) %>% sort(dat_final$ISOname)
dat_final %>% subset(dat_final, dat_final$selected == 1)
dat_final %>% filter(dat_final, dat_final$selected == 1) %>% sort(dat_final$ISOname)
dat_final %>% filter(dat_final, dat_final$selected == 1)
dat_final %>% if_any(dat_final, dat_final$selected == 1)
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/UCB_fall22/STAT_133/simpson_text_analysis/app-template.R')
runApp('C:/Users/lisaz/Downloads/UCB_fall22/STAT_133/simpson_text_analysis/app-template.R')
runApp('C:/Users/lisaz/Downloads/UCB_fall22/STAT_133/simpson_text_analysis/app-template.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
dat <- iso3166
dat <- rename(dat, "iso-a3" = a3)
countries_visited <- c("CAN", "CHN", "JAM", "FRA", "GBR", " USA", "MEX", "BHS")
countries_want_visit <- c("AUS", "AUT", "BTN","BRA", "BGR", "KHM", "CYM", "DNK",
"EGY", "FJI", "DEU", "GRC", "GRL", "HKG", "ISL", "IRL",
"ISR", "ITA", "JPN", "KOR", "MAC", "MYS", "MNG", "MMR",
"NPL", "NLD", "NZL", "NOR", "SGP", "ESP", "SWE", "CHE",
"TWN", "THA", "TUR", "ARE", "VNM")
dat$places_visited <- ifelse(dat$`iso-a3` %in% countries_visited, 1, 0)
dat$want_visit <- ifelse(dat$`iso-a3` %in% countries_want_visit, 1, 0)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat_table <- dat_final %>%
filter(selected == 1) %>%
sort(ISOname)
dat_table <- dat_final %>%
filter(selected == 1)
dat_table
dat_table <- dat_final %>%
filter(selected == 1) %>%
sort(mapname)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat <- iso3166
dat <- rename(dat, "iso-a3" = a3)
countries_visited <- c("CAN", "CHN", "JAM", "FRA", "GBR", " USA", "MEX", "BHS")
countries_want_visit <- c("AUS", "AUT", "BTN","BRA", "BGR", "KHM", "CYM", "DNK",
"EGY", "FJI", "DEU", "GRC", "GRL", "HKG", "ISL", "IRL",
"ISR", "ITA", "JPN", "KOR", "MAC", "MYS", "MNG", "MMR",
"NPL", "NLD", "NZL", "NOR", "SGP", "ESP", "SWE", "CHE",
"TWN", "THA", "TUR", "ARE", "VNM")
dat$places_visited <- ifelse(dat$`iso-a3` %in% countries_visited, 1, 0)
dat$want_visit <- ifelse(dat$`iso-a3` %in% countries_want_visit, 1, 0)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat_table <- dat_final %>%
sort(ISOname) %>%
filter(selected == 1)
dat_final
dat_table <- dat_final %>%
sort(mapname)
dat_final %>%
filter(selected == 1)
dat_final %>%
filter(selected == 1) %>% sort()
dat_final %>%
filter(selected == 1) %>% sort(mapname)
dat_table <- dat_final %>%
filter(selected == 1)
sort(dat_final_table$ISOname)
dat_table <- dat_final %>%
filter(selected == 1)
sort(dat_table$ISOname)
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
dat <- iso3166
dat <- rename(dat, "iso-a3" = a3)
countries_visited <- c("CAN", "CHN", "JAM", "FRA", "GBR", "USA", "MEX", "BHS")
countries_want_visit <- c("AUS", "AUT", "BTN","BRA", "BGR", "KHM", "CYM", "DNK",
"EGY", "FJI", "DEU", "GRC", "GRL", "HKG", "ISL", "IRL",
"ISR", "ITA", "JPN", "KOR", "MAC", "MYS", "MNG", "MMR",
"NPL", "NLD", "NZL", "NOR", "SGP", "ESP", "SWE", "CHE",
"TWN", "THA", "TUR", "ARE", "VNM")
dat$places_visited <- ifelse(dat$`iso-a3` %in% countries_visited, 1, 0)
dat$want_visit <- ifelse(dat$`iso-a3` %in% countries_want_visit, 1, 0)
dat_final <- select(dat, `iso-a3`, ISOname, mapname, places_visited)
dat_final <- rename(dat_final, "selected" = places_visited)
dat_final
dat_table <- dat_final() %>%
filter(selected == 1)
dat_table <- dat_final %>%
filter(selected == 1)
dat_table <- sort(dat_table$ISOname)
dat_table
type(dat_table)
typeof(dat_table)
runApp('C:/Users/lisaz/Downloads/countries_visited.R')
runApp('C:/Users/lisaz/Downloads/places_visited.R')
setwd("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Sectio/3")
## Setting working directory
getwd()
setwd("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Sectio/3")
library(dplyr)
library(stargazer)
library(ivreg)
library(knitr)
mexico_data <- read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Section/3Mexico.csv")
# Load dataset
mexico_data <- read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Section/3/Mexico.csv")
# Get means and difference in means
mexico_data
# Using tidyR syntax
mexico_data %>% group_by(ind_lang) %>% summarize(mean(inc_m))
mexico_data
#regression
ols_results = summary(lm(inc_m ~ ind_lang, data=mexico_data))
ols_results
ols_results$coefficients[2,1]
mean_diff
# Using base R syntax
mean1 = mean(mexico_data$inc_m[mexico_data$ind_lang==1])
mean1
mean0 = mean(mexico_data$inc_m[mexico_data$ind_lang==0])
mean0
mean_diff = mean1 - mean0
mean_diff
#regression
ols_results$coefficients[2,1]
mean_diff
mexico_data$services_sector <- ifelse(mexico_data$sector == "Services", 1, 0)
mexico_data$services_sector
#alternative now manufacturing
mexico_data <- mexico_data %>%
mutate(manuf_sector = ifelse(sector == "Manufacturing", 1, 0))
mexico_data
#alternative now condition for age
mexico_data <- mexico_data %>%
mutate(older_than_60 = ifelse(age > 60, 1, 0))
mexico_data
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stargazer)
library(knitr)
library(ivreg)
mexico_Data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexic_PS2")
mexico_Data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexic_PS2")
library(knitr)
### Question 2
```{r}
mexico_Data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexic_PS2")
mexico_Data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexic_PS2.csv")
mexico_Data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexico_PS2.csv")
# summary table
stargazer(mexico_data, type="text",
title="Summary Statistics",
summary.stat = c("n", "mean", "sd", "min", "max"))
mexico_data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexico_PS2.csv")
# summary table
stargazer(mexico_data, type="text",
title="Summary Statistics",
summary.stat = c("n", "mean", "sd", "min", "max"))
mexico_data = read.csv("C:/Users/lisaz/Downloads/UCB_spring24/ECON_140/Mexico_PS2.csv")
# summary table
stargazer(mexico_data, type="text",
title="Summary Statistics",
summary.stat = c("n", "mean", "sd", "min", "max"))
model <- lm(log_avg_monthly_income ~ avg_years_education, data = data)
model <- lm(log_avg_monthly_income ~ avg_years_education, data = mexico_data)
model <- lm(log(inc_m) ~ educ_years, data = mexico_data)
model <- lm(log(inc_m) ~ educ_years, data = mexico_data)
stargazer(model, type = "text")
model <- lm(log(inc_m) ~ educ_years, data = mexico_data)
stargazer(model, type = "text")
stargazer(model, first_stage, type = "text",
column.labels = c("Main Regression", "First Stage"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
first_stage <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
stargazer(model, first_stage, type = "text",
column.labels = c("Main Regression", "First Stage"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# Obtain predicted values of education from the first stage regression
data$predicted_education <- predict(first_stage)
# First-stage regression
first_stage <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
stargazer(model, first_stage, type = "text",
column.labels = c("Main Regression", "First Stage"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# Obtain predicted values of education from the first stage regression
data$predicted_education <- predict(first_stage)
# Obtain predicted values of education from the first stage regression
mexico_data$predicted_education <- predict(first_stage)
# Fit the second stage TSLS regression
second_stage <- lm(log_avg_monthly_income ~ predicted_education, data = data)
# Fit the second stage TSLS regression
second_stage <- lm(log_avg_monthly_income ~ predicted_education, data = mexico_data)
# Obtain predicted values of education from the first stage regression
mexico_data$predicted_education <- predict(first_stage)
# Fit the second stage TSLS regression
second_stage <- lm(log(inc_m) ~ predicted_education, data = mexico_data)
# Display regression results using stargazer, appending to the previous table
stargazer(model, first_stage, second_stage, type = "text",
column.labels = c("Main Regression", "First Stage", "Second Stage (TSLS)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + prop_indigenous_population, data = mexico_data)
# assume
prop_indigenous_population <- mean(mexico_data$ind_lang)
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + prop_indigenous_population, data = mexico_data)
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log_tourism_sales + log_avg_temperature + log_avg_precipitation + ind_lang, data = mexico_data)
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Display regression results using stargazer
stargazer(first_stage_no_controls, first_stage_with_controls, reduced_form_no_controls, reduced_form_with_controls,
type = "text",
column.labels = c("First Stage (No Controls)", "First Stage (With Controls)", "Reduced Form (No Controls)", "Reduced Form (With Controls)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Display regression results using stargazer
stargazer(first_stage_no_controls, first_stage_with_controls, reduced_form_no_controls, reduced_form_with_controls,
type = "text",
column.labels = c("First Stage (No Controls)", "First Stage (With Controls)", "Reduced Form (No Controls)", "Reduced Form (With Controls)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Display regression results using stargazer
stargazer(first_stage_no_controls, first_stage_with_controls, reduced_form_no_controls, reduced_form_with_controls,
type = "text",
column.labels = c("First Stage (No Controls)", "First Stage (With Controls)", "Reduced Form (No Controls)", "Reduced Form (With Controls)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
First-stage regression without additional controls
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log(sales_hotel) + logtemp + logprecip + ind_lang, data = mexico_data)
stargazer(first_stage_no_controls, first_stage_with_controls, reduced_form_no_controls, reduced_form_with_controls,
type = "text",
column.labels = c("First Stage (No Controls)", "First Stage (With Controls)", "Reduced Form (No Controls)", "Reduced Form (With Controls)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
# First-stage regression without additional controls
first_stage_no_controls <- lm(educ_years ~ log(dist_us_km), data = mexico_data)
# First-stage regression with additional controls
first_stage_with_controls <- lm(educ_years ~ log(dist_us_km) + log(sales_hotel) + logtemp + logprecip, data = mexico_data)
# Reduced-form regression without additional controls
reduced_form_no_controls <- lm(log(inc_m) ~ fitted(first_stage_no_controls), data = mexico_data)
# Reduced-form regression with additional controls
reduced_form_with_controls <- lm(log(inc_m) ~ fitted(first_stage_with_controls) + log(sales_hotel) + logtemp + logprecip, data = mexico_data)
# Display regression results using stargazer
stargazer(first_stage_no_controls, first_stage_with_controls, reduced_form_no_controls, reduced_form_with_controls,
type = "text",
column.labels = c("First Stage (No Controls)", "First Stage (With Controls)", "Reduced Form (No Controls)", "Reduced Form (With Controls)"),
align = TRUE,
omit = "Constant",
omit.labels = "Constant",
star.cutoffs = c(0.05, 0.01, 0.001))
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(ggplot2)
# Create data for the relative price and corresponding exports
relative_price <- seq(0.5, 2, by = 0.1)
exports <- ifelse(relative_price < 1, 0, (relative_price - 1) * 100)
# Create a data frame
data <- data.frame(relative_price, exports)
# Plot the export supply curve
ggplot(data, aes(x = relative_price, y = exports)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Export Supply Curve for Danish Electronics",
x = "Relative Price of Electronics",
y = "Quantity of Electronics Exported") +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 2, 0.5), limits = c(0, 2)) +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray")
# Load necessary libraries
library(ggplot2)
# Create data for the relative price and corresponding exports
relative_price <- seq(0, 2, by = 0.1)  # Including 0 to 2
exports <- ifelse(relative_price < 1, 0, (relative_price - 1) * 100)  # Exports are 0 when price < 1
# Create a data frame
data <- data.frame(relative_price, exports)
# Plot the export supply curve
ggplot(data, aes(x = relative_price, y = exports)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Export Supply Curve for Danish Electronics",
x = "Relative Price of Electronics",
y = "Quantity of Electronics Exported") +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 2, 0.5), limits = c(0, 2)) +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
annotate("text", x = 1, y = 5, label = "Relative Price = 1", vjust = -1, color = "gray") +
annotate("text", x = 0.5, y = 10, label = "No Exports", vjust = -1, color = "red")
library(shiny); runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
runApp('GitHub/CS-STAT-Projects/Simpsons Transcript Text Analysis/Simpsons Transcript Text Analysis.R')
